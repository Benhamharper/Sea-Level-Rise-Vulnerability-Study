<!DOCTYPE html>
<html>
<head>
<meta charset='utf-8' />
<title>Add a new layer below labels</title>
<meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js'></script>
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css' rel='stylesheet' />
<style>
  body { margin:0; padding:0; }
  #map { position:absolute; top:0; bottom:0; width:100%; }
  .map-overlay {
      position: absolute;
      width: 180px;
      top: 0;
      left: 10px;
      padding: 10px;
      margin-left: 5px;
      margin-top: 2px;
      margin-bottom: 2px;
      margin-right: 5px;
      z-index: 1;
  }
    .my-overlay {
      background: #000000A0;
      color:#fff;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.10);
      border-radius: 3px;
      padding: 10px;
      z-index: 1;
    }
    .my-overlay hr {
      margin: 5px;
      background: #808080;
    }
    
    .map-overlay-inner fieldset {
        border: none;
        padding: 0;
        margin: 0 0 10px;
        z-index: 1;
    }
    select#layer_selection {
     -webkit-appearance: button;
     -webkit-border-radius: 2px;
     -webkit-box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);
     -webkit-padding-end: 20px;
     -webkit-padding-start: 2px;
     -webkit-user-select: none;
     background-image: url(http://i62.tinypic.com/15xvbd5.png), -webkit-linear-gradient(#FAFAFA, #F4F4F4 40%, #E5E5E5);
     background-position: 97% center;
     background-repeat: no-repeat;
     border: 1px solid #AAA;
     font-weight: bold;
     color: #555;
     font-size: inherit;
     margin: 5px;
     overflow: hidden;
     padding: 5px 10px;
     text-overflow: ellipsis;
     white-space: nowrap;
     width: 12.5em;
     height: 300px;
  }

</style>
</head>
<body>
 
<div id='map'></div>
<script>
  mapboxgl.accessToken = 'pk.eyJ1IjoiamVucy1tb3VudGFpbm1hdGgiLCJhIjoiTmJ2Z3FHNCJ9.ifMzNW0vPH1Yc6As93HP9A';
      var bounds = [
           [-123.5,   48.9],
          [-122.25,   49.4]
      ];
  
  var map = new mapboxgl.Map({
  container: 'map',
  style: 'mapbox://styles/mapbox/streets-v11',
          center: [-123.1,   49.24914],
          zoom: 12,
          minZoom: 8,
          maxZoom: 20,
          pitch: 40,
          //attributionControl: false,
          maxBounds: bounds
  });
   
   
   MAP_LAYERS={
  "aboriginal_land_2": {
    "name": "aboriginal lands",
    "layer": "aboriginal_land_2",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "Airport": {
    "name": "Airport",
    "layer": "Airport",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "alttrnst": {
    "name": "alternate transit yards",
    "layer": "alttrnst",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "BLD_EAGLE_polygon": {
    "name": "Bald Eagle Habitat",
    "layer": "BLD_EAGLE_polygon",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "BLU_HERON_polygon": {
    "name": "Blue Heron Habitat",
    "layer": "BLU_HERON_polygon",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "cmmnty_bldg": {
    "name": "community buildings",
    "layer": "cmmnty_bldg",
    "color": "#f08",
    "opacity": 0.2,
    "type": "POLYGON"
  },
  "cmmnty_cntrt": {
    "name": "cmmnty_cntrt",
    "layer": "cmmnty_cntrt",
    "color": "#f08",
    "opacity": 0.2,
    "type": "POLYGON"
  },
  "commercial": {
    "name": "commercial",
    "layer": "commercial",
    "color": "#f08",
    "opacity": 0.2,
    "type": "POLYGON"
  },
  "contour_-0.5": {
    "name": "contour_-0.5",
    "layer": "contour_-0.5",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_-1": {
    "name": "contour_-1",
    "layer": "contour_-1",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_0.5": {
    "name": "contour_0.5",
    "layer": "contour_0.5",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_0": {
    "name": "contour_0",
    "layer": "contour_0",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_1.5": {
    "name": "contour_1.5",
    "layer": "contour_1.5",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_1": {
    "name": "contour_1",
    "layer": "contour_1",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_2.5": {
    "name": "contour_2.5",
    "layer": "contour_2.5",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_2": {
    "name": "contour_2",
    "layer": "contour_2",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_3.5": {
    "name": "contour_3.5",
    "layer": "contour_3.5",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_3": {
    "name": "contour_3",
    "layer": "contour_3",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_4.5": {
    "name": "contour_4.5",
    "layer": "contour_4.5",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_4": {
    "name": "contour_4",
    "layer": "contour_4",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "contour_5.5": {
    "name": "contour_5.5",
    "layer": "contour_5.5",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "contour_5": {
    "name": "contour_5",
    "layer": "contour_5",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_6.5": {
    "name": "contour_6.5",
    "layer": "contour_6.5",
    "color": "#f08",
    "opacity": 0.2,
    "type": "LINE"
  },
  "contour_6": {
    "name": "contour_6",
    "layer": "contour_6",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "CORMORANTS_polygon": {
    "name": "CORMORANTS",
    "layer": "CORMORANTS_polygon",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "DRPDSSTRRS_Line": {
    "name": "DRPDSSTRRS",
    "layer": "DRPDSSTRRS_Line",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "eelgrasses_polygon": {
    "name": "eelgrasses",
    "layer": "eelgrasses_polygon",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "electrc_pwr_Statn": {
    "name": "electrc_pwr_Statn",
    "layer": "electrc_pwr_Statn",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "estuary": {
    "name": "estuary",
    "layer": "estuary",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "FNT_TRT_LN_polygon": {
    "name": "FNT_TRT_LN",
    "layer": "FNT_TRT_LN_polygon",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "FPW_FPWKLN_Line": {
    "name": "FPW_FPWKLN",
    "layer": "FPW_FPWKLN_Line",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "FRST_RSPND_point": {
    "name": "FRST_RSPND",
    "layer": "FRST_RSPND_point",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POINT"
  },
  "hospital": {
    "name": "hospital",
    "layer": "hospital",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "HOSPITALS_Point": {
    "name": "HOSPITALS",
    "layer": "HOSPITALS_Point",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POINT"
  },
  "Industrial": {
    "name": "Industrial",
    "layer": "Industrial",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "Institutional": {
    "name": "Institutional",
    "layer": "Institutional",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "LOCREG_GRN_polygon": {
    "name": "LOCREG_GRN",
    "layer": "LOCREG_GRN_polygon",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "mudflats": {
    "name": "mudflats",
    "layer": "mudflats",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "mv_rec_prtct": {
    "name": "mv_rec_prtct",
    "layer": "mv_rec_prtct",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "NAT_WLDLND_polygon": {
    "name": "NAT_WLDLND",
    "layer": "NAT_WLDLND_polygon",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "nautical_facility_1": {
    "name": "nautical_facility_1",
    "layer": "nautical_facility_1",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "pipeline_1": {
    "name": "pipeline_1",
    "layer": "pipeline_1",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "port_van": {
    "name": "port_van",
    "layer": "port_van",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "power_line_1": {
    "name": "power_1",
    "layer": "power_line_1",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "PRT_TERMNAL_point": {
    "name": "PRT_TERMNAL",
    "layer": "PRT_TERMNAL_point",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POINT"
  },
  "REC_FISH_polygon": {
    "name": "REC_FISH",
    "layer": "REC_FISH_polygon",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "residential_area_2": {
    "name": "residential_area_2",
    "layer": "residential_area_2",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "ritual_cultural_area_2": {
    "name": "ritual_cultural_area_2",
    "layer": "ritual_cultural_area_2",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "rlgs_cntr": {
    "name": "rlgs_cntr",
    "layer": "rlgs_cntr",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "roads_Arterial": {
    "name": "roads_Arterial",
    "layer": "roads_Arterial",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "roads_collector": {
    "name": "roads_collector",
    "layer": "roads_collector",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "roads_expressway": {
    "name": "roads_expressway",
    "layer": "roads_expressway",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "roads_freeway": {
    "name": "roads_freeway",
    "layer": "roads_freeway",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "roads_ramp": {
    "name": "roads_ramp",
    "layer": "roads_ramp",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "runway_2": {
    "name": "runway_2",
    "layer": "runway_2",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "sandflats": {
    "name": "sandflats",
    "layer": "sandflats",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "Scenario_a": {
    "name": "Scenario_a",
    "layer": "Scenario_a",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "Scenario_b": {
    "name": "Scenario_b",
    "layer": "Scenario_b",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "Scenario_c": {
    "name": "Scenario_c",
    "layer": "Scenario_c",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "Scenario_d": {
    "name": "Scenario_d",
    "layer": "Scenario_d",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "schools": {
    "name": "schools",
    "layer": "schools",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "track_Segment_1": {
    "name": "track_Segment_1",
    "layer": "track_Segment_1",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "transformer_Station_0": {
    "name": "transformer_Station_0",
    "layer": "transformer_Station_0",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POINT"
  },
  "TRNSMT_LNS_line": {
    "name": "TRNSMT_LNS",
    "layer": "TRNSMT_LNS_line",
    "color": "#f08",
    "opacity": 0.4,
    "type": "LINE"
  },
  "TSLRPLS_polygon": {
    "name": "TSLRPLS",
    "layer": "TSLRPLS_polygon",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "waste_2": {
    "name": "waste_2",
    "layer": "waste_2",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  },
  "wetlands": {
    "name": "wetlands",
    "layer": "wetlands",
    "color": "#f08",
    "opacity": 0.4,
    "type": "POLYGON"
  }
}

  var firstSymbolId;
  var base_url = 'https://s3.ca-central-1.amazonaws.com/mountainmath/living_breakwaters/'
  
  function addFillLayer(layer){
    map.addLayer({
    'id': layer.layer,
      'type': 'fill',
      'source': {
        'type': 'geojson',
        'data': base_url+layer.layer+'.geojson'
      },
      'layout': {},
      'paint': {
        'fill-color': layer.color,
        'fill-opacity': layer.opacity
      }
    }, firstSymbolId);
  }
  
  function addLineLayer(layer){
    map.addLayer({
    'id': layer.layer,
      'type': 'line',
      'source': {
        'type': 'geojson',
        'data': base_url+layer.layer+'.geojson'
      },
      'layout': {},
      'paint': {
        'line-color': layer.color,
        'line-opacity': layer.opacity
      }
    }, firstSymbolId);
  }

  function addCircleLayer(layer){
    map.addLayer({
    'id': layer.layer,
      'type': 'circle',
      'source': {
        'type': 'geojson',
        'data': base_url+layer.layer+'.geojson'
      },
      'layout': {},
      'paint': {
        'circle-color': layer.color,
        'circle-opacity': layer.opacity
      }
    }, firstSymbolId);
  }
  
  
  let currentLayers=[];
  let loadedLayers=[];
  
  function updateAllLayers(){
    const selected = document.querySelectorAll('#layer_selection option:checked');
    const selectedValues = Array.from(selected).map(el => el.value);
    let toRemove = currentLayers.filter(x => !selectedValues.includes(x));
    let toAdd = selectedValues.filter(x => !currentLayers.includes(x));
    
    toAdd.forEach(addLayerForID)
    toRemove.forEach(removeLayerForID)
  }
  
  function removeLayerForID(layerID){
    const index=currentLayers.indexOf(layerID)
    if (index!=-1) {
      currentLayers.splice(index,1)
      map.setLayoutProperty(layerID, 'visibility', 'none');
    } else {
      consol.log("problem removing layer "+layerID)
    }
  }
  
  function addLayerForID(layerID){
    const index=loadedLayers.indexOf(layerID)
    if (index!=-1){
      map.setLayoutProperty(layerID, 'visibility', 'visible');
      return
    }

    let layer=MAP_LAYERS[layerID]
    if (!layer) {
      debugger
    }
    switch (layer.type) {
      case 'POLYGON':
        addFillLayer(layer)
        break;
      case 'LINE':
        addLineLayer(layer)
        break;
      case 'POINT':
        addCircleLayer(layer)
        break;
      default:
        console.log("unknown layer type")
    }
    currentLayers.push(layerID)
    loadedLayers.push(layerID)
  }
  
  map.on('load', function () {
   
    var layers = map.getStyle().layers;
    // Find the index of the first symbol layer in the map style
    for (var i = 0; i < layers.length; i++) {
      if (layers[i].type === 'symbol') {
        firstSymbolId = layers[i].id;
        break;
      }
    }
    
    firstSymbolId='waterway-label'
    
    class MyControl {
      onAdd(map) {
          this._map = map;
          this._container = document.createElement('div');
          this._container.className = 'mapboxgl-ctrl my-overlay';
          var menu=document.createElement('div');
          menu.innerHTML = `<div id="menu">
          <fieldset><label><h4>Select metric</h4></label>
          <select id="layer_selection" name="layer_selection" multiple="multiple">` +
          Object.keys(MAP_LAYERS).map(function(n){
            let layer=MAP_LAYERS[n]
            return  `<option value="${layer.layer}">${layer.name}</option>`
          }).join('') +
          '</select></fieldset></div>'
          var legend=document.createElement('div');
          legend.id="legend";
          var attribution=document.createElement('div');
          attribution.innerHTML='<b>Info/Details: <a href="#" target="_blank">***Link***</a></b>'
          this._container.appendChild(menu);
          this._container.appendChild(document.createElement('hr'));
          this._container.appendChild(legend);
          this._container.appendChild(document.createElement('hr'));
          this._container.appendChild(attribution);
                  
          //legend=this.container.
          return this._container;
      }
      
      onRemove() {
          this._container.parentNode.removeChild(this._container);
          this._map = undefined;
      }
      
    }
    
    map.addControl(new MyControl(),'top-left');
    layer_selection.addEventListener('change', function() {
          updateAllLayers();
        });
        
    //updateMap(Object.keys(MAP_LAYERS)[0]) 
        

  });
</script>
 
 
</body>
</html>
